var parser=require("socket.io-parser");var Emitter=require("component-emitter");var toArray=require("to-array");var on=require("./on");var bind=require("component-bind");var debug=require("debug")("socket.io-client:socket");var parseqs=require("parseqs");module.exports=exports=Socket;var events={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1};var emit=Emitter.prototype.emit;function Socket(c,b,a){this.io=c;this.nsp=b;this.json=this;this.ids=0;this.acks={};this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;if(a&&a.query){this.query=a.query}if(this.io.autoConnect){this.open()}}Emitter(Socket.prototype);Socket.prototype.subEvents=function(){if(this.subs){return}var a=this.io;this.subs=[on(a,"open",bind(this,"onopen")),on(a,"packet",bind(this,"onpacket")),on(a,"close",bind(this,"onclose"))]};Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected){return this}this.subEvents();this.io.open();if("open"===this.io.readyState){this.onopen()}this.emit("connecting");return this};Socket.prototype.send=function(){var a=toArray(arguments);a.unshift("message");this.emit.apply(this,a);return this};Socket.prototype.emit=function(b){if(events.hasOwnProperty(b)){emit.apply(this,arguments);return this}var a=toArray(arguments);var c={type:parser.EVENT,data:a};c.options={};c.options.compress=!this.flags||false!==this.flags.compress;if("function"===typeof a[a.length-1]){debug("emitting packet with ack id %d",this.ids);this.acks[this.ids]=a.pop();c.id=this.ids++}if(this.connected){this.packet(c)}else{this.sendBuffer.push(c)}delete this.flags;return this};Socket.prototype.packet=function(a){a.nsp=this.nsp;this.io.packet(a)};Socket.prototype.onopen=function(){debug("transport is open - connecting");if("/"!==this.nsp){if(this.query){var a=typeof this.query==="object"?parseqs.encode(this.query):this.query;debug("sending connect packet with query %s",a);this.packet({type:parser.CONNECT,query:a})}else{this.packet({type:parser.CONNECT})}}};Socket.prototype.onclose=function(a){debug("close (%s)",a);this.connected=false;this.disconnected=true;delete this.id;this.emit("disconnect",a)};Socket.prototype.onpacket=function(a){if(a.nsp!==this.nsp){return}switch(a.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(a);break;case parser.BINARY_EVENT:this.onevent(a);break;case parser.ACK:this.onack(a);break;case parser.BINARY_ACK:this.onack(a);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit("error",a.data);break}};Socket.prototype.onevent=function(b){var a=b.data||[];debug("emitting event %j",a);if(null!=b.id){debug("attaching ack callback to event");a.push(this.ack(b.id))}if(this.connected){emit.apply(this,a)}else{this.receiveBuffer.push(a)}};Socket.prototype.ack=function(c){var a=this;var b=false;return function(){if(b){return}b=true;var d=toArray(arguments);debug("sending ack %j",d);a.packet({type:parser.ACK,id:c,data:d})}};Socket.prototype.onack=function(a){var b=this.acks[a.id];if("function"===typeof b){debug("calling ack %s with %j",a.id,a.data);b.apply(this,a.data);delete this.acks[a.id]}else{debug("bad ack %s",a.id)}};Socket.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit("connect");this.emitBuffered()};Socket.prototype.emitBuffered=function(){var a;for(a=0;a<this.receiveBuffer.length;a++){emit.apply(this,this.receiveBuffer[a])}this.receiveBuffer=[];for(a=0;a<this.sendBuffer.length;a++){this.packet(this.sendBuffer[a])}this.sendBuffer=[]};Socket.prototype.ondisconnect=function(){debug("server disconnect (%s)",this.nsp);this.destroy();this.onclose("io server disconnect")};Socket.prototype.destroy=function(){if(this.subs){for(var a=0;a<this.subs.length;a++){this.subs[a].destroy()}this.subs=null}this.io.destroy(this)};Socket.prototype.close=Socket.prototype.disconnect=function(){if(this.connected){debug("performing disconnect (%s)",this.nsp);this.packet({type:parser.DISCONNECT})}this.destroy();if(this.connected){this.onclose("io client disconnect")}return this};Socket.prototype.compress=function(a){this.flags=this.flags||{};this.flags.compress=a;return this};