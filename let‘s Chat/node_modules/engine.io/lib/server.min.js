var qs=require("querystring");var parse=require("url").parse;var base64id=require("base64id");var transports=require("./transports");var EventEmitter=require("events").EventEmitter;var Socket=require("./socket");var util=require("util");var debug=require("debug")("engine");var cookieMod=require("cookie");module.exports=Server;function Server(b){if(!(this instanceof Server)){return new Server(b)}this.clients={};this.clientsCount=0;b=b||{};this.wsEngine=b.wsEngine||process.env.EIO_WS_ENGINE||"uws";this.pingTimeout=b.pingTimeout||60000;this.pingInterval=b.pingInterval||25000;this.upgradeTimeout=b.upgradeTimeout||10000;this.maxHttpBufferSize=b.maxHttpBufferSize||100000000;this.transports=b.transports||Object.keys(transports);this.allowUpgrades=false!==b.allowUpgrades;this.allowRequest=b.allowRequest;this.cookie=false!==b.cookie?(b.cookie||"io"):false;this.cookiePath=false!==b.cookiePath?(b.cookiePath||"/"):false;this.cookieHttpOnly=false!==b.cookieHttpOnly;this.perMessageDeflate=false!==b.perMessageDeflate?(b.perMessageDeflate||true):false;this.httpCompression=false!==b.httpCompression?(b.httpCompression||{}):false;this.initialPacket=b.initialPacket;var a=this;["perMessageDeflate","httpCompression"].forEach(function(d){var c=a[d];if(true===c){a[d]=c={}}if(c&&null==c.threshold){c.threshold=1024}});this.init()}Server.errors={UNKNOWN_TRANSPORT:0,UNKNOWN_SID:1,BAD_HANDSHAKE_METHOD:2,BAD_REQUEST:3,FORBIDDEN:4};Server.errorMessages={0:"Transport unknown",1:"Session ID unknown",2:"Bad handshake method",3:"Bad request",4:"Forbidden"};util.inherits(Server,EventEmitter);Server.prototype.clients;Server.prototype.init=function(){if(!~this.transports.indexOf("websocket")){return}if(this.ws){this.ws.close()}var b;try{b=require(this.wsEngine)}catch(a){this.wsEngine="ws";b=require("ws")}this.ws=new b.Server({noServer:true,clientTracking:false,perMessageDeflate:this.perMessageDeflate,maxPayload:this.maxHttpBufferSize})};Server.prototype.upgrades=function(a){if(!this.allowUpgrades){return[]}return transports[a].upgradesTo||[]};Server.prototype.verify=function(c,d,b){var e=c._query.transport;if(!~this.transports.indexOf(e)){debug('unknown transport "%s"',e);return b(Server.errors.UNKNOWN_TRANSPORT,false)}var a=c._query.sid;if(a){if(!this.clients.hasOwnProperty(a)){return b(Server.errors.UNKNOWN_SID,false)}if(!d&&this.clients[a].transport.name!==e){debug("bad request: unexpected transport without upgrade");return b(Server.errors.BAD_REQUEST,false)}}else{if("GET"!==c.method){return b(Server.errors.BAD_HANDSHAKE_METHOD,false)}if(!this.allowRequest){return b(null,true)}return this.allowRequest(c,b)}b(null,true)};Server.prototype.prepare=function(a){if(!a._query){a._query=~a.url.indexOf("?")?qs.parse(parse(a.url).query):{}}};Server.prototype.close=function(){debug("closing all open clients");for(var a in this.clients){if(this.clients.hasOwnProperty(a)){this.clients[a].close(true)}}if(this.ws){debug("closing webSocketServer");this.ws.close()}return this};Server.prototype.handleRequest=function(c,b){debug('handling "%s" http request "%s"',c.method,c.url);this.prepare(c);c.res=b;var a=this;this.verify(c,false,function(d,e){if(!e){sendErrorMessage(c,b,d);return}if(c._query.sid){debug("setting new request for existing client");a.clients[c._query.sid].transport.onRequest(c)}else{a.handshake(c._query.transport,c)}})};function sendErrorMessage(c,a,b){var e={"Content-Type":"application/json"};var d=!Server.errorMessages.hasOwnProperty(b);if(d){a.writeHead(403,e);a.end(JSON.stringify({code:Server.errors.FORBIDDEN,message:b||Server.errorMessages[Server.errors.FORBIDDEN]}));return}if(c.headers.origin){e["Access-Control-Allow-Credentials"]="true";e["Access-Control-Allow-Origin"]=c.headers.origin}else{e["Access-Control-Allow-Origin"]="*"}a.writeHead(400,e);a.end(JSON.stringify({code:b,message:Server.errorMessages[b]}))}Server.prototype.generateId=function(a){return base64id.generateId()};Server.prototype.handshake=function(f,c){var h=this.generateId(c);debug('handshaking client "%s"',h);try{var g=new transports[f](c);if("polling"===f){g.maxHttpBufferSize=this.maxHttpBufferSize;g.httpCompression=this.httpCompression}else{if("websocket"===f){g.perMessageDeflate=this.perMessageDeflate}}if(c._query&&c._query.b64){g.supportsBinary=false}else{g.supportsBinary=true}}catch(d){sendErrorMessage(c,c.res,Server.errors.BAD_REQUEST);return}var a=new Socket(h,this,g,c);var b=this;if(false!==this.cookie){g.on("headers",function(e){e["Set-Cookie"]=cookieMod.serialize(b.cookie,h,{path:b.cookiePath,httpOnly:b.cookiePath?b.cookieHttpOnly:false})})}g.onRequest(c);this.clients[h]=a;this.clientsCount++;a.once("close",function(){delete b.clients[h];b.clientsCount--});this.emit("connection",a)};Server.prototype.handleUpgrade=function(c,a,d){this.prepare(c);var b=this;this.verify(c,true,function(f,g){if(!g){abortConnection(a,f);return}var e=new Buffer(d.length);d.copy(e);d=null;b.ws.handleUpgrade(c,a,e,function(h){b.onWebSocket(c,h)})})};Server.prototype.onWebSocket=function(d,c){c.on("error",a);if(!transports[d._query.transport].prototype.handlesUpgrades){debug("transport doesnt handle upgraded requests");c.close();return}var f=d._query.sid;d.websocket=c;if(f){var b=this.clients[f];if(!b){debug("upgrade attempt for closed client");c.close()}else{if(b.upgrading){debug("transport has already been trying to upgrade");c.close()}else{if(b.upgraded){debug("transport had already been upgraded");c.close()}else{debug("upgrading existing transport");c.removeListener("error",a);var e=new transports[d._query.transport](d);if(d._query&&d._query.b64){e.supportsBinary=false}else{e.supportsBinary=true}e.perMessageDeflate=this.perMessageDeflate;b.maybeUpgrade(e)}}}}else{c.removeListener("error",a);this.handshake(d._query.transport,d)}function a(){debug("websocket error before upgrade")}};Server.prototype.attach=function(g,d){var c=this;d=d||{};var f=(d.path||"/engine.io").replace(/\/$/,"");var b=d.destroyUpgradeTimeout||1000;f+="/";function a(h){if("OPTIONS"===h.method&&false===d.handlePreflightRequest){return false}return f===h.url.substr(0,f.length)}var e=g.listeners("request").slice(0);g.removeAllListeners("request");g.on("close",c.close.bind(c));g.on("listening",c.init.bind(c));g.on("request",function(m,k){if(a(m)){debug('intercepting request for path "%s"',f);if("OPTIONS"===m.method&&"function"===typeof d.handlePreflightRequest){d.handlePreflightRequest.call(g,m,k)}else{c.handleRequest(m,k)}}else{for(var j=0,h=e.length;j<h;j++){e[j].call(g,m,k)}}});if(~c.transports.indexOf("websocket")){g.on("upgrade",function(j,h,i){if(a(j)){c.handleUpgrade(j,h,i)}else{if(false!==d.destroyUpgrade){setTimeout(function(){if(h.writable&&h.bytesWritten<=0){return h.end()}},b)}}})}};function abortConnection(a,d){if(a.writable){var c=Server.errorMessages.hasOwnProperty(d)?Server.errorMessages[d]:d;var b=Buffer.byteLength(c);a.write("HTTP/1.1 400 Bad Request\r\nConnection: close\r\nContent-type: text/html\r\nContent-Length: "+b+"\r\n\r\n"+c)}a.destroy()};